CCS PCH C Compiler, Version 4.124, 5967               31-out-12 18:34

               Filename: C:\Users\cuki\Eletronica\Projetos\I2CGit\I2C\mestre.lst

               ROM used: 1032 bytes (3%)
                         Largest free fragment is 31732
               RAM used: 28 (2%) at main() level
                         36 (2%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
0000:  GOTO   0294
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF0.3
0056:  GOTO   0060
005A:  BTFSC  FF0.0
005C:  GOTO   00BA
0060:  BTFSS  FF0.4
0062:  GOTO   006C
0066:  BTFSC  FF0.1
0068:  GOTO   00C6
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... /* 
....................  * mestre.c 
....................  * 
....................  *  Created on: 22/10/2012 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include <18F252.h> 
.................... //////// Standard Header file for the PIC18F252 device //////////////// 
.................... #device PIC18F252 
.................... #list 
....................  
....................  
.................... #fuses	H4,NOOSCSEN,NOPUT,NOBROWNOUT,NOWDT,NOSTVREN,NOLVP 
.................... #fuses	NODEBUG,NOPROTECT,NOCPB,NOCPD,NOWRT,NOWRTC,NOWRTB 
.................... #fuses	NOWRTD,NOEBTR,NOEBTRB 
....................  
.................... #use delay(clock=32MHz, crystal=8MHz) 
*
014A:  CLRF   FEA
014C:  MOVLW  1E
014E:  MOVWF  FE9
0150:  MOVF   FEF,W
0152:  BZ    016E
0154:  MOVLW  0A
0156:  MOVWF  01
0158:  CLRF   00
015A:  DECFSZ 00,F
015C:  BRA    015A
015E:  DECFSZ 01,F
0160:  BRA    0158
0162:  MOVLW  5F
0164:  MOVWF  00
0166:  DECFSZ 00,F
0168:  BRA    0166
016A:  DECFSZ FEF,F
016C:  BRA    0154
016E:  RETURN 0
.................... #use rs232(xmit=pin_c6, rcv=pin_c7, baud=9600, parity=E, stop=1) 
0170:  MOVLW  08
0172:  MOVWF  01
0174:  CLRF   21
0176:  MOVFF  20,00
017A:  MOVF   00,W
017C:  XORWF  21,F
017E:  RRCF   00,F
0180:  DECFSZ 01,F
0182:  BRA    017A
0184:  BTFSS  F9E.4
0186:  BRA    0184
0188:  MOVLW  FE
018A:  ANDWF  FAC,F
018C:  BTFSC  21.0
018E:  BSF    FAC.0
0190:  MOVFF  20,FAD
0194:  RETURN 0
.................... #use i2c(master, scl=pin_c3, sda=pin_c4, fast=1000000, force_hw) 
*
0212:  BCF    FC6.7
0214:  BCF    F9E.3
0216:  MOVFF  23,FC9
021A:  MOVLW  02
021C:  BTFSC  FC6.7
021E:  BRA    022A
0220:  BTFSS  F9E.3
0222:  BRA    0220
0224:  MOVLW  00
0226:  BTFSC  FC5.6
0228:  MOVLW  01
022A:  MOVWF  01
022C:  RETURN 0
....................  
.................... #define addr_device 0xB0 
.................... #define memory_addr 0x01 
.................... #define data_addr	0x55 
.................... #define debounce	500 
....................  
.................... static int ext1, ext2; 
....................  
.................... #INT_EXT1 
.................... void isr_ext1() { 
.................... 	clear_interrupt(INT_EXT1); 
*
00BA:  BCF    FF0.0
.................... 	ext1 = 1; 
00BC:  MOVLW  01
00BE:  MOVWF  19
.................... } 
....................  
00C0:  BCF    FF0.0
00C2:  GOTO   006C
.................... #INT_EXT2 
.................... void isr_ext2() { 
.................... 	clear_interrupt(INT_EXT2); 
00C6:  BCF    FF0.1
.................... 	ext2 = 1; 
00C8:  MOVLW  01
00CA:  MOVWF  1A
.................... } 
....................  
00CC:  BCF    FF0.1
00CE:  GOTO   006C
.................... short handshake(int addr) { 
*
022E:  BSF    22.0
.................... 	short ack = 1; 
.................... 	i2c_start(); 
0230:  BSF    FC5.0
0232:  BTFSC  FC5.0
0234:  BRA    0232
.................... 	ack = i2c_write(addr); 
0236:  MOVFF  21,23
023A:  RCALL  0212
023C:  MOVF   01,W
023E:  BCF    22.0
0240:  BTFSC  01.0
0242:  BSF    22.0
.................... 	i2c_stop(); 
0244:  BSF    FC5.2
0246:  BTFSC  FC5.2
0248:  BRA    0246
.................... 	return ack; 
024A:  MOVLW  00
024C:  BTFSC  22.0
024E:  MOVLW  01
0250:  MOVWF  01
.................... } 
0252:  RETURN 0
....................  
.................... int send_i2c(int addr, int mem, int data, int data2) { 
.................... 	if (handshake(addr)) 
0254:  MOVFF  1D,21
0258:  RCALL  022E
025A:  MOVF   01,F
025C:  BZ    0266
.................... 		return 0xFF; 
025E:  MOVLW  FF
0260:  MOVWF  01
0262:  BRA    0290
.................... 	else { 
0264:  BRA    0290
.................... 		i2c_start(); 
0266:  BSF    FC5.0
0268:  BTFSC  FC5.0
026A:  BRA    0268
.................... 		i2c_write(addr); 
026C:  MOVFF  1D,23
0270:  RCALL  0212
.................... 		i2c_write(mem); 
0272:  MOVFF  1E,23
0276:  RCALL  0212
.................... 		i2c_write(data); 
0278:  MOVFF  1F,23
027C:  RCALL  0212
.................... 		i2c_write(data2); 
027E:  MOVFF  20,23
0282:  RCALL  0212
.................... 		i2c_stop(); 
0284:  BSF    FC5.2
0286:  BTFSC  FC5.2
0288:  BRA    0286
.................... 		return 0; 
028A:  MOVLW  00
028C:  MOVWF  01
028E:  BRA    0290
.................... 	} 
.................... } 
0290:  GOTO   03D0 (RETURN)
....................  
.................... int read_i2c(int addr, int data) { 
.................... 	int retorno = 0; 
.................... 	if (handshake(addr)) 
.................... 		return 0xFF; 
.................... 	else { 
.................... 		i2c_start(); 
.................... 		i2c_write(addr); 
.................... 		i2c_write(data); 
.................... 		i2c_start(); 
.................... 		i2c_write(addr + 1); 
.................... 		retorno = i2c_read(0); 
.................... 		i2c_stop(); 
.................... 		return retorno; 
.................... 	} 
.................... } 
....................  
.................... int main(void) { 
0294:  CLRF   FF8
0296:  BCF    FD0.7
0298:  BSF    07.7
029A:  CLRF   FEA
029C:  CLRF   FE9
029E:  MOVLW  33
02A0:  MOVWF  FAF
02A2:  MOVLW  E2
02A4:  MOVWF  FAC
02A6:  MOVLW  D0
02A8:  MOVWF  FAB
02AA:  BSF    F94.3
02AC:  BSF    F94.4
02AE:  MOVLW  07
02B0:  MOVWF  FC8
02B2:  MOVLW  28
02B4:  MOVWF  FC6
02B6:  BSF    FC7.7
02B8:  BCF    FC7.6
02BA:  BSF    FC1.0
02BC:  BSF    FC1.1
02BE:  BSF    FC1.2
02C0:  BCF    FC1.3
02C2:  CLRF   19
02C4:  CLRF   1A
....................  
.................... 	port_b_pullups(true); 
02C6:  BCF    FF1.7
.................... 	enable_interrupts(INT_EXT1_H2L); 
02C8:  BSF    FF0.3
02CA:  BCF    FF1.5
.................... 	enable_interrupts(INT_EXT2_H2L); 
02CC:  BSF    FF0.4
02CE:  BCF    FF1.4
.................... 	enable_interrupts(GLOBAL); 
02D0:  MOVLW  C0
02D2:  IORWF  FF2,F
.................... 	delay_ms(500); 
02D4:  MOVLW  02
02D6:  MOVWF  1D
02D8:  MOVLW  FA
02DA:  MOVWF  1E
02DC:  RCALL  014A
02DE:  DECFSZ 1D,F
02E0:  BRA    02D8
....................  
.................... 	while (true) { 
.................... 		printf("\fCheck <- ext1\n\rSend  <- ext2\n\r"); 
02E2:  MOVLW  D2
02E4:  MOVWF  FF6
02E6:  MOVLW  00
02E8:  MOVWF  FF7
02EA:  RCALL  0196
.................... 		if (ext1) { 
02EC:  MOVF   19,F
02EE:  BZ    0362
.................... 			ext1 = 0; 
02F0:  CLRF   19
.................... 			int ack = 0; 
02F2:  CLRF   1B
.................... 			printf("ext1"); 
02F4:  MOVLW  F2
02F6:  MOVWF  FF6
02F8:  MOVLW  00
02FA:  MOVWF  FF7
02FC:  RCALL  0196
.................... 			delay_ms(debounce); 
02FE:  MOVLW  02
0300:  MOVWF  1D
0302:  MOVLW  FA
0304:  MOVWF  1E
0306:  RCALL  014A
0308:  DECFSZ 1D,F
030A:  BRA    0302
.................... 			printf("\fIniciando 0x%X", addr_device); 
030C:  MOVLW  F8
030E:  MOVWF  FF6
0310:  MOVLW  00
0312:  MOVWF  FF7
0314:  MOVLW  0D
0316:  MOVWF  1D
0318:  RCALL  01B6
031A:  MOVLW  B0
031C:  MOVWF  1D
031E:  MOVLW  37
0320:  MOVWF  1E
0322:  RCALL  01D4
.................... 			do { 
.................... 				ack = handshake(addr_device); 
0324:  MOVLW  B0
0326:  MOVWF  21
0328:  RCALL  022E
032A:  MOVFF  01,1B
.................... 				if (ack) { 
032E:  MOVF   1B,F
0330:  BZ    033E
.................... 					printf("\n\rNao repondendo"); 
0332:  MOVLW  08
0334:  MOVWF  FF6
0336:  MOVLW  01
0338:  MOVWF  FF7
033A:  RCALL  0196
.................... 				} else 
033C:  BRA    0348
.................... 					printf("\n\rOk"); 
033E:  MOVLW  1A
0340:  MOVWF  FF6
0342:  MOVLW  01
0344:  MOVWF  FF7
0346:  RCALL  0196
.................... 				delay_ms(1000); 
0348:  MOVLW  04
034A:  MOVWF  1D
034C:  MOVLW  FA
034E:  MOVWF  1E
0350:  RCALL  014A
0352:  DECFSZ 1D,F
0354:  BRA    034C
.................... 			} while (ack && !ext1); 
0356:  MOVF   1B,F
0358:  BZ    035E
035A:  MOVF   19,F
035C:  BZ    0324
.................... 			ext1 = 0; 
035E:  CLRF   19
.................... 		} else if (ext2) { 
0360:  BRA    03F6
0362:  MOVF   1A,F
0364:  BZ    03F6
.................... 			ext2 = 0; 
0366:  CLRF   1A
.................... 			printf("ext1"); 
0368:  MOVLW  20
036A:  MOVWF  FF6
036C:  MOVLW  01
036E:  MOVWF  FF7
0370:  RCALL  0196
.................... 			delay_ms(debounce); 
0372:  MOVLW  02
0374:  MOVWF  1D
0376:  MOVLW  FA
0378:  MOVWF  1E
037A:  RCALL  014A
037C:  DECFSZ 1D,F
037E:  BRA    0376
.................... 			printf("\fEscrevendo 0x%X\nem 0x%X 0xAA", data_addr, memory_addr); 
0380:  MOVLW  26
0382:  MOVWF  FF6
0384:  MOVLW  01
0386:  MOVWF  FF7
0388:  MOVLW  0E
038A:  MOVWF  1D
038C:  RCALL  01B6
038E:  MOVLW  55
0390:  MOVWF  1D
0392:  MOVLW  37
0394:  MOVWF  1E
0396:  RCALL  01D4
0398:  MOVLW  36
039A:  MOVWF  FF6
039C:  MOVLW  01
039E:  MOVWF  FF7
03A0:  MOVLW  06
03A2:  MOVWF  1D
03A4:  RCALL  01B6
03A6:  MOVLW  01
03A8:  MOVWF  1D
03AA:  MOVLW  37
03AC:  MOVWF  1E
03AE:  RCALL  01D4
03B0:  MOVLW  3E
03B2:  MOVWF  FF6
03B4:  MOVLW  01
03B6:  MOVWF  FF7
03B8:  MOVLW  05
03BA:  MOVWF  1D
03BC:  RCALL  01B6
.................... 			int aux = send_i2c(addr_device, memory_addr, data_addr, 0xAA); 
03BE:  MOVLW  B0
03C0:  MOVWF  1D
03C2:  MOVLW  01
03C4:  MOVWF  1E
03C6:  MOVLW  55
03C8:  MOVWF  1F
03CA:  MOVLW  AA
03CC:  MOVWF  20
03CE:  BRA    0254
03D0:  MOVFF  01,1C
.................... //			printf("  %s", (aux == 0xFF) ? "Err" : "Ok"); 
.................... 			if (aux == 0xFF) 
03D4:  INCFSZ 1C,W
03D6:  BRA    03E4
.................... 				printf(" Err"); 
03D8:  MOVLW  44
03DA:  MOVWF  FF6
03DC:  MOVLW  01
03DE:  MOVWF  FF7
03E0:  RCALL  0196
.................... 			else 
03E2:  BRA    03F6
.................... 				printf(" Ok"); 
03E4:  MOVLW  20
03E6:  MOVWF  20
03E8:  RCALL  0170
03EA:  MOVLW  4F
03EC:  MOVWF  20
03EE:  RCALL  0170
03F0:  MOVLW  6B
03F2:  MOVWF  20
03F4:  RCALL  0170
.................... 		} 
.................... 		delay_ms(1000); 
03F6:  MOVLW  04
03F8:  MOVWF  1D
03FA:  MOVLW  FA
03FC:  MOVWF  1E
03FE:  RCALL  014A
0400:  DECFSZ 1D,F
0402:  BRA    03FA
.................... 	} 
0404:  BRA    02E2
.................... 	return 0; 
0406:  MOVLW  00
0408:  MOVWF  01
.................... } 
....................  
.................... /*		switch (cont++) { 
....................  case 0: 
....................  
....................  break; 
....................  case 1: 
....................  aux = 0; 
....................  printf("\fEnviando 0x%X\nem 0x%X :", data_addr, memory_addr); 
....................  aux = send_i2c(addr_device, memory_addr, data_addr); 
....................  printf("\n%s", aux == 0xFF ? "Error" : "Ok"); 
....................  break; 
....................  case 2: 
....................  aux = 0; 
....................  printf("\fLendo em 0x%X", memory_addr); 
....................  aux = read_i2c(addr_device, memory_addr); 
....................  printf("\nleitura: 0x%X", aux); 
....................  break; 
....................  default: 
....................  cont = 0; 
....................  break; 
....................  }*/ 
040A:  SLEEP 

Configuration Fuses:
   Word  1: 2600   H4 NOOSCSEN
   Word  2: 0E0D   NOPUT NOBROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0080   NOSTVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
